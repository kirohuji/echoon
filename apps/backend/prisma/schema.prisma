generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  phone         String
  password      String?
  emails        String[]
  username      String?
  status        Int       @default(1) // 1: active, 0: inactive
  lastOnline    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  verificationCodes VerificationCode[]
  refreshTokens RefreshToken[]
  profile       Profile?
  personal      Personal?
  files         File[]
  roleAssignments RoleAssignment[]
}

model Profile {
  id        String   @id
  name      String?
  user      User     @relation(fields: [id], references: [id])
  photoURL  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  participants Participant[]
}

model Personal {
  id          String   @id @default(cuid())
  name      String?
  user        User     @relation(fields: [id], references: [id])
  prompt      String   // 角色设定/初始 prompt
  llm         Json?
  tts         Json?
  stt         Json?
  specialty   String?
  language    String?
  personality String?
  photoURL    String?  // 角色头像
  description String?  // 角色简介
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  participants Participant[]
}

enum ScopeType {
  Tenant
  Org
  Project
}

model Scope {
  id          String   @id @default(cuid())
  type        ScopeType
  label       String
  value       String
  description String?
  parentId    String?  // 支持树状结构（可选）
  parent      Scope?   @relation("ScopeHierarchy", fields: [parentId], references: [id])
  children    Scope[]  @relation("ScopeHierarchy")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String?

  roleAssignments RoleAssignment[]
  @@unique([parentId, value])
}

model Role {
  id          String    @id @default(cuid())
  label       String    @unique
  value       String    @unique
  description String?
  parentRoles Role[]    @relation("RoleInheritance")
  childRoles  Role[]    @relation("RoleInheritance")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  updatedBy   String?

  roleAssignments RoleAssignment[]
  permissions Permission[] @relation("PermissionToRole")
}

model RoleAssignment {
  id          String   @id @default(cuid())
  roleId      String
  userId      String
  scopeId     String?  // 外键
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String?

  // Relations
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  scope  Scope? @relation(fields: [scopeId], references: [id])
  @@unique([userId, roleId, scopeId])
}

model Permission {
  id          String      @id @default(cuid())
  label       String      @unique
  value       String      @unique
  description String?
  parentId    String?
  parent      Permission? @relation("PermissionHierarchy", fields: [parentId], references: [id])
  children    Permission[] @relation("PermissionHierarchy")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  updatedBy   String?

  // Relations
  roles Role[] @relation("PermissionToRole")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
  @@index([token])
}


model VerificationCode {
  id        String   @id @default(cuid())
  phone     String
  code      String
  type      Int      // 1: login, 2: register, 3: reset password
  status    Int      @default(1) // 1: unused, 0: used
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Conversation {
  id                String   @id @default(cuid())
  title             String?  @default("")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  type              String?
  messageCount      Int @default(0)
  participants      Participant[]
  messages          Message[]
  isRemoved         Boolean  @default(false)
  isArchived        Boolean  @default(false)
  createdBy         String
  updatedBy         String?
}

model Participant {
  id              String   @id @default(cuid())
  conversationId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isPersonal      Boolean  @default(false)
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  profile         Profile?     @relation(fields: [profileUserId], references: [id])
  personal        Personal?    @relation(fields: [personalUserId], references: [id])
  profileUserId   String?
  personalUserId  String?
  @@index([conversationId])
  @@index([profileUserId])
  @@index([personalUserId])
}

model Message {
  id             String   @id @default(cuid())
  content        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  languageCode   String?
  extraMetadata  Json?
  conversationId String
  senderId       String
  attachments    Attachment[]
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id])
  file      File     @relation(fields: [fileId], references: [id])
  fileId    String
}

model File {
  id          String   @id @default(cuid())
  fileName    String
  fileType    String
  fileUrl     String
  fileSize    Int      // Size in bytes
  mimeType    String
  fileKey     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  status      Int      @default(1) // 1: active, 0: deleted

  // Relations
  user        User     @relation(fields: [createdBy], references: [id])
  attachments Attachment[]
  @@index([createdBy])
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  updatedBy String?
  fileId    String?
  file      File?    @relation(fields: [fileId], references: [id])
}

